package main

import (
	"fmt"
	"log"

	"github.com/dcooper46/go-ds-from-scratch/utils"
)

var x = [][]float64{
	{1.0, 0.7, 48000.0}, {1.0, 1.9, 48000.0}, {1.0, 2.5, 60000.0}, {1.0, 4.2, 63000.0},
	{1.0, 6.0, 76000.0}, {1.0, 6.5, 69000.0}, {1.0, 7.5, 76000.0}, {1.0, 8.1, 88000.0},
	{1.0, 8.7, 83000.0}, {1.0, 10.0, 83000.0}, {1.0, 0.8, 43000.0}, {1.0, 1.8, 60000.0},
	{1.0, 10.0, 79000.0}, {1.0, 6.1, 76000.0}, {1.0, 1.4, 50000.0}, {1.0, 9.1, 92000.0},
	{1.0, 5.8, 75000.0}, {1.0, 5.2, 69000.0}, {1.0, 1.0, 56000.0}, {1.0, 6.0, 67000.0},
	{1.0, 4.9, 74000.0}, {1.0, 6.4, 63000.0}, {1.0, 6.2, 82000.0}, {1.0, 3.3, 58000.0},
	{1.0, 9.3, 90000.0}, {1.0, 5.5, 57000.0}, {1.0, 9.1, 102000.0}, {1.0, 2.4, 54000.0},
	{1.0, 8.2, 65000.0}, {1.0, 5.3, 82000.0}, {1.0, 9.8, 107000.0}, {1.0, 1.8, 64000.0},
	{1.0, 0.6, 46000.0}, {1.0, 0.8, 48000.0}, {1.0, 8.6, 84000.0}, {1.0, 0.6, 45000.0},
	{1.0, 0.5, 30000.0}, {1.0, 7.3, 89000.0}, {1.0, 2.5, 48000.0}, {1.0, 5.6, 76000.0},
	{1.0, 7.4, 77000.0}, {1.0, 2.7, 56000.0}, {1.0, 0.7, 48000.0}, {1.0, 1.2, 42000.0},
	{1.0, 0.2, 32000.0}, {1.0, 4.7, 56000.0}, {1.0, 2.8, 44000.0}, {1.0, 7.6, 78000.0},
	{1.0, 1.1, 63000.0}, {1.0, 8.0, 79000.0}, {1.0, 2.7, 56000.0}, {1.0, 6.0, 52000.0},
	{1.0, 4.6, 56000.0}, {1.0, 2.5, 51000.0}, {1.0, 5.7, 71000.0}, {1.0, 2.9, 65000.0},
	{1.0, 1.1, 33000.0}, {1.0, 3.0, 62000.0}, {1.0, 4.0, 71000.0}, {1.0, 2.4, 61000.0},
	{1.0, 7.5, 75000.0}, {1.0, 9.7, 81000.0}, {1.0, 3.2, 62000.0}, {1.0, 7.9, 88000.0},
	{1.0, 4.7, 44000.0}, {1.0, 2.5, 55000.0}, {1.0, 1.6, 41000.0}, {1.0, 6.7, 64000.0},
	{1.0, 6.9, 66000.0}, {1.0, 7.9, 78000.0}, {1.0, 8.1, 102000.0}, {1.0, 5.3, 48000.0},
	{1.0, 8.5, 66000.0}, {1.0, 0.2, 56000.0}, {1.0, 6.0, 69000.0}, {1.0, 7.5, 77000.0},
	{1.0, 8.0, 86000.0}, {1.0, 4.4, 68000.0}, {1.0, 4.9, 75000.0}, {1.0, 1.5, 60000.0},
	{1.0, 2.2, 50000.0}, {1.0, 3.4, 49000.0}, {1.0, 4.2, 70000.0}, {1.0, 7.7, 98000.0},
	{1.0, 8.2, 85000.0}, {1.0, 5.4, 88000.0}, {1.0, 0.1, 46000.0}, {1.0, 1.5, 37000.0},
	{1.0, 6.3, 86000.0}, {1.0, 3.7, 57000.0}, {1.0, 8.4, 85000.0}, {1.0, 2.0, 42000.0},
	{1.0, 5.8, 69000.0}, {1.0, 2.7, 64000.0}, {1.0, 3.1, 63000.0}, {1.0, 1.9, 48000.0},
	{1.0, 10.0, 72000.0}, {1.0, 0.2, 45000.0}, {1.0, 8.6, 95000.0}, {1.0, 1.5, 64000.0},
	{1.0, 9.8, 95000.0}, {1.0, 5.3, 65000.0}, {1.0, 7.5, 80000.0}, {1.0, 9.9, 91000.0},
	{1.0, 9.7, 50000.0}, {1.0, 2.8, 68000.0}, {1.0, 3.6, 58000.0}, {1.0, 3.9, 74000.0},
	{1.0, 4.4, 76000.0}, {1.0, 2.5, 49000.0}, {1.0, 7.2, 81000.0}, {1.0, 5.2, 60000.0},
	{1.0, 2.4, 62000.0}, {1.0, 8.9, 94000.0}, {1.0, 2.4, 63000.0}, {1.0, 6.8, 69000.0},
	{1.0, 6.5, 77000.0}, {1.0, 7.0, 86000.0}, {1.0, 9.4, 94000.0}, {1.0, 7.8, 72000.0},
	{1.0, 0.2, 53000.0}, {1.0, 10.0, 97000.0}, {1.0, 5.5, 65000.0}, {1.0, 7.7, 71000.0},
	{1.0, 8.1, 66000.0}, {1.0, 9.8, 91000.0}, {1.0, 8.0, 84000.0}, {1.0, 2.7, 55000.0},
	{1.0, 2.8, 62000.0}, {1.0, 9.4, 79000.0}, {1.0, 2.5, 57000.0}, {1.0, 7.4, 70000.0},
	{1.0, 2.1, 47000.0}, {1.0, 5.3, 62000.0}, {1.0, 6.3, 79000.0}, {1.0, 6.8, 58000.0},
	{1.0, 5.7, 80000.0}, {1.0, 2.2, 61000.0}, {1.0, 4.8, 62000.0}, {1.0, 3.7, 64000.0},
	{1.0, 4.1, 85000.0}, {1.0, 2.3, 51000.0}, {1.0, 3.5, 58000.0}, {1.0, 0.9, 43000.0},
	{1.0, 0.9, 54000.0}, {1.0, 4.5, 74000.0}, {1.0, 6.5, 55000.0}, {1.0, 4.1, 41000.0},
	{1.0, 7.1, 73000.0}, {1.0, 1.1, 66000.0}, {1.0, 9.1, 81000.0}, {1.0, 8.0, 69000.0},
	{1.0, 7.3, 72000.0}, {1.0, 3.3, 50000.0}, {1.0, 3.9, 58000.0}, {1.0, 2.6, 49000.0},
	{1.0, 1.6, 78000.0}, {1.0, 0.7, 56000.0}, {1.0, 2.1, 36000.0}, {1.0, 7.5, 90000.0},
	{1.0, 4.8, 59000.0}, {1.0, 8.9, 95000.0}, {1.0, 6.2, 72000.0}, {1.0, 6.3, 63000.0},
	{1.0, 9.1, 100000.0}, {1.0, 7.3, 61000.0}, {1.0, 5.6, 74000.0}, {1.0, 0.5, 66000.0},
	{1.0, 1.1, 59000.0}, {1.0, 5.1, 61000.0}, {1.0, 6.2, 70000.0}, {1.0, 6.6, 56000.0},
	{1.0, 6.3, 76000.0}, {1.0, 6.5, 78000.0}, {1.0, 5.1, 59000.0}, {1.0, 9.5, 74000.0},
	{1.0, 4.5, 64000.0}, {1.0, 2.0, 54000.0}, {1.0, 1.0, 52000.0}, {1.0, 4.0, 69000.0},
	{1.0, 6.5, 76000.0}, {1.0, 3.0, 60000.0}, {1.0, 4.5, 63000.0}, {1.0, 7.8, 70000.0},
	{1.0, 3.9, 60000.0}, {1.0, 0.8, 51000.0}, {1.0, 4.2, 78000.0}, {1.0, 1.1, 54000.0},
	{1.0, 6.2, 60000.0}, {1.0, 2.9, 59000.0}, {1.0, 2.1, 52000.0}, {1.0, 8.2, 87000.0},
	{1.0, 4.8, 73000.0}, {1.0, 2.2, 42000.0}, {1.0, 9.1, 98000.0}, {1.0, 6.5, 84000.0},
	{1.0, 6.9, 73000.0}, {1.0, 5.1, 72000.0}, {1.0, 9.1, 69000.0}, {1.0, 9.8, 79000.0},
}

var y = []float64{
	1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
	0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0,
	1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0,
	1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,
	1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
	1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0,
	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0,
	0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
	0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
}

func main() {
	normX, err := utils.Normalize(x)
	if err != nil {
		log.Fatalf("error normalizing data: %e", err)
	}
	xTrain, xTest, yTrain, yTest := utils.TrainTestSplit(normX, y, 0.33)

	fmt.Printf(
		"xtrain: %d, xtest: %d, ytrain: %d, ytest: %d\n",
		len(xTrain),
		len(xTest),
		len(yTrain),
		len(yTest),
	)
	fmt.Println(xTrain[:3])
	fmt.Println(yTrain[:3])
	beta := EstimateBeta(xTrain, yTrain)
	fmt.Println(beta)

	predictions := make([]float64, len(yTest))
	for i, xi := range xTest {
		dot, err := utils.Dot(xi, beta)
		if err != nil {
			log.Fatalf("error performing dot product: %e", err)
		}
		prob := Logistic(dot)
		if prob > 0.5 {
			predictions[i] = 1.0
		} else {
			predictions[i] = 0.0
		}
	}

	confMat := utils.Confusion(yTest, predictions)
	fmt.Println(confMat)

	fmt.Printf("precision: %f\n", utils.Precision(confMat))
	fmt.Printf("recall: %f\n", utils.Recall(confMat))
}
